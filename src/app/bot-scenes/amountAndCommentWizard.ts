import { Markup, Scenes } from 'telegraf';
import { Expense } from '../models';
import { GoogleSheetsService } from '../services/GoogleSheetsService';
import { UserMappingService } from '../services/UserMappingService';
import { GoogleSheetPageUrlTemplate } from '../constants';

export interface AddCashWizardSession extends Scenes.WizardSessionData {
    amount?: string;
    comment?: string;
}

const askAmountAndCommentStep = async (ctx: Scenes.WizardContext<AddCashWizardSession>) => {
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.\n' + '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 150.50 –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤');
    return ctx.wizard.next();
};

const confirmStep = async (ctx: Scenes.WizardContext<AddCashWizardSession>) => {
    if (ctx.message && 'text' in ctx.message) {
        const inputText = ctx.message.text.trim();
        const firstSpaceIndex = inputText.indexOf(' ');

        if (firstSpaceIndex === -1) {
            await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —ñ –∫–æ–º–µ–Ω—Ç–∞—Ä, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.');
            return;
        }

        const [amount, ...commentParts] = inputText.split(' ');
        const comment = commentParts.join(' ').trim();

        const normalizedAmount = amount.replace(',', '.');
        if (!normalizedAmount || isNaN(parseFloat(normalizedAmount))) {
            await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º—É –∞–±–æ –∫—Ä–∞–ø–∫—É –¥–ª—è –∫–æ–ø—ñ–π–æ–∫.');
            return;
        }

        if (!comment) {
            await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä.');
            return;
        }

        ctx.scene.session.amount = parseFloat(normalizedAmount).toFixed(2);
        ctx.scene.session.comment = comment;

        await ctx.reply(
            `–í–∏ –≤–≤–µ–ª–∏ —Å—É–º—É: ${ctx.scene.session.amount} —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä: ${ctx.scene.session.comment}. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏? (—Ç–∞–∫/–Ω—ñ)`,
            Markup.inlineKeyboard([Markup.button.callback('–¢–∞–∫', 'confirm'), Markup.button.callback('–ù—ñ', 'cancel')]),
        );
        return ctx.wizard.next();
    } else {
        await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
    }
};

const handleConfirmationStep = async (ctx: Scenes.WizardContext<AddCashWizardSession>) => {
    if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
        const callbackData = ctx.callbackQuery.data;

        if (callbackData === 'confirm') {
            const googleSheetsService = await GoogleSheetsService.create();

            const userId = ctx.from?.id || 0;
            const expenseOwner = new UserMappingService().getOwnerByUserId(userId);
            if (!expenseOwner) {
                await ctx.reply('–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏.');
                return ctx.scene.leave();
            }

            const username = ctx.from?.username || '';
            const expense = {
                Date: new Date(),
                Description: `–≥–æ—Ç—ñ–≤–∫–∞ (${username}): ` + ctx.scene.session.comment,
                Sum: parseFloat(ctx.scene.session.amount || '0') * -1,
                ExpenseOwner: expenseOwner,
            } as Expense;

            await ctx.sendChatAction('typing');
            await ctx.reply('üìù –î–æ–¥–∞—é –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—é...');
            await googleSheetsService.WriteExpensesToSheet([expense]);


            const cashSheetID = "1015706772";
            const url = GoogleSheetPageUrlTemplate
                .replace('{spreadsheetId}', process.env.SPREADSHEET_ID || '')
                .replace('{sheetId}', cashSheetID);

            let messageTemplate = '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥–æ—Ç—ñ–≤–∫—É url';
            const message = messageTemplate
            .replace(/([_*\[\]()~`>#+\-=|{}.!])/g, '\\$1')
            .replace('url', `[—Ç—É—Ç](${url})`);

            await ctx.reply(message, { parse_mode: 'MarkdownV2', link_preview_options: { is_disabled: true } });
        } else {
            await ctx.reply('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.');
        }

        await ctx.answerCbQuery();
    } else {
        await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }

    return ctx.scene.leave();
};

export const addCashWizard = new Scenes.WizardScene<Scenes.WizardContext<AddCashWizardSession>>(
    'add-cash-wizard',
    askAmountAndCommentStep,
    confirmStep,
    handleConfirmationStep,
);
