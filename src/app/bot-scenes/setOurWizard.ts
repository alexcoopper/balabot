import { Markup, Scenes } from 'telegraf';
import { Expense } from '../models';
import { GoogleSheetsService } from '../services/GoogleSheetsService';
import { UserMappingService } from '../services/UserMappingService';

export interface SetOurWizardSession extends Scenes.WizardSessionData {
    amount?: string;
}

const askAmountStep = async (ctx: Scenes.WizardContext<SetOurWizardSession>) => {
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç.\n' + '–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: –≤–∏—Ç—Ä–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∑–Ω–∞—á–∞—Ç–∏–º—É—Ç—å—Å—è —è–∫ "–ù–∞—à—ñ", —è–∫—â–æ –æ–ø–ª–∞—Ç–∞ –±—É–ª–∞ –∑–¥—ñ–π—Å–Ω–µ–Ω–∞ –Ω–µ –ø—ñ–∑–Ω—ñ—à–µ –Ω—ñ–∂ 3 –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É.');
    return ctx.wizard.next();
};

const confirmStep = async (ctx: Scenes.WizardContext<SetOurWizardSession>) => {
    if (ctx.message && 'text' in ctx.message) {
        const inputText = ctx.message.text.trim();
        
        const amount = inputText.trim();

        const normalizedAmount = amount.replace(',', '.');
        if (!normalizedAmount || isNaN(parseFloat(normalizedAmount))) {
            await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º—É –∞–±–æ –∫—Ä–∞–ø–∫—É –¥–ª—è –∫–æ–ø—ñ–π–æ–∫.');
            return;
        }

        ctx.scene.session.amount = parseFloat(normalizedAmount).toFixed(2);

        const userId = ctx.from?.id || 0;
        const expenseOwner = new UserMappingService().getOwnerByUserId(userId);
        if (!expenseOwner) {
            await ctx.reply('–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏.');
            return ctx.scene.leave();
        }

        const username = ctx.from?.username || ctx.from?.first_name || '';
        const expense = {
            Date: new Date(),
            Description: username,
            Sum: parseFloat(ctx.scene.session.amount || '0'),
            ExpenseOwner: expenseOwner,
        } as Expense;

        const googleSheetsService = await GoogleSheetsService.create();

        await ctx.sendChatAction('typing');
        await ctx.reply('üìù –î–æ–¥–∞—é –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—é...');
        await googleSheetsService.WriteOwnExpensesToSheet([expense]);
        await ctx.reply('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ.');
         ctx.wizard.next();
        return ctx.scene.leave();
    } else {
        await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
    }
};


export const setOurWizard = new Scenes.WizardScene<Scenes.WizardContext<SetOurWizardSession>>(
    'set-own-wizard',
    askAmountStep,
    confirmStep,
);
